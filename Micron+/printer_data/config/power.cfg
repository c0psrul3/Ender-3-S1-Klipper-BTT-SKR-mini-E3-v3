#####################################################################
#  Idle Timeout 
#####################################################################
[idle_timeout]
timeout: 7200   ; 2h timeout
gcode:
  {% if printer.webhooks.state|lower == 'ready' %}
    {action_respond_info("POWER: Execute Idle Timeout")}

    # check if printer state is "paused" (i.e. waiting for filament or something)
    {% if printer.pause_resume.is_paused|lower == 'true' %}
      #{% if printer['gcode_macro _USER_VARIABLE'].hw.relay.ena %}
      #  UPDATE_DELAYED_GCODE ID=_DELAY_HEATER_OFF DURATION=10
      #{% endif %}
      UPDATE_DELAYED_GCODE ID=_DELAY_HEATER_OFF DURATION=60
    {% elif printer.pause_resume.is_paused|lower == 'false' %}
      UPDATE_DELAYED_GCODE ID=_DELAY_PRINTER_IDLE DURATION=20
      {% if ('xyz' in printer.toolhead.homed_axes) %}
        PARK_REAR     ; park print head
      {% endif %}
    #{% elif printer.pause_resume.is_paused|lower == 'false' %}
    #  UPDATE_DELAYED_GCODE ID=_DELAY_PSU_OFF DURATION=60
    #{% else %}
    #  #UPDATE_DELAYED_GCODE ID=_DELAY_PRINTER_OFF DURATION=1800
    {% endif %}
  {% endif %}

# [output_pin mcu_relay]
# pin: rpi:PWR_DET
# pwm: false
# shutdown_value: 0
# value: 1

[gcode_macro POWER_STANDBY]
description: set standby mode for neopixels, wleds, filter fan
gcode:
  STATUS_STANDBY
  WLED_OFF
  {% if printer.idle_timeout.state == "Idle" %}
    M84
  {% endif %}
  TURN_OFF_HEATERS
  #TURN_OFF_FILTER_FAN
  TURN_OFF_PART_FAN
  TURN_OFF_FAN


[delayed_gcode _DELAY_PRINTER_IDLE]
initial_duration: 0.
gcode:
  STATUS_STANDBY
  {% if printer.idle_timeout.state == "Idle" %}
    M84
  {% endif %}
  WLED_OFF
  SET_MATCHSTICK_LEDS_OFF
  TURN_OFF_HEATERS


[delayed_gcode _DELAY_PRINTER_OFF]
initial_duration: 0.
gcode:
  STATUS_OFF
  {% if printer.idle_timeout.state == "Idle" %}
    POWER_OFF_PRINTER
  {% endif %}


#####################################################################
# 	Macro
#####################################################################           
[delayed_gcode _DELAY_PSU_OFF]
gcode:
  {action_respond_info("POWER: 24V PS power off")}
  {action_call_remote_method("set_device_power", device="psu", state="off")}

      
[gcode_macro _HEATER_ON]
description: Helper: Power on BED and Extruder power 
gcode:
  {%if printer['output_pin heater_bed_relay'].value == 0 %}
    {action_respond_info("POWER: heater_bed power on")}
    SET_PIN PIN=heater_bed_relay VALUE=1
  {% endif %}
  {action_call_remote_method("set_device_power", device="bed", state="on")}
  {%if printer['output_pin extruder_relay'].value == 0 %}
    {action_respond_info("POWER: extruder power on")}
    SET_PIN PIN=extruder_relay VALUE=1
  {% endif %}
            
            
[delayed_gcode _DELAY_HEATER_OFF]
gcode:
  {%if printer['output_pin heater_bed_relay'].value == 1 %}  
    {action_respond_info("POWER: heater_bed power off")}
    SET_PIN PIN=heater_bed_relay VALUE=0
  {% endif %}
  {action_call_remote_method("set_device_power", device="bed", state="off")}
  {%if printer['output_pin extruder_relay'].value == 1 %}
    {action_respond_info("POWER: extruder power off")}
    SET_PIN PIN=extruder_relay VALUE=0
  {% endif %}
# 
# 
# [gcode_macro _SHUTDOWN_PI]
# description: Helper: Power down the rPi
# gcode: {action_call_remote_method("shutdown_machine")}
# 
# 
# [gcode_macro PRINTER_OFF]
# description: Park head and Power down the rPi
# gcode:
#   {% set user = printer['gcode_macro _USER_VARIABLE'] %}
#   _CG28 ; home if not already homed
#   G90   ; absolute positioning
#   G0 X{user.park.bed.x} Y{user.park.bed.y} Z{user.park.bed.z} F{user.speed.travel}
#   M117 PI Off in 5 sec
#   G4 P5000
#   M400
#   _SHUTDOWN_PI


# [gcode_macro POWER_ON_PRINTER]
# description: Power on printer
# gcode:
#   {action_call_remote_method( "set_device_power", device="MicronPSU", state="on")}
#   # turn on lights
#   WLED_ON
#
#
# [gcode_macro POWER_OFF_PRINTER]
# gcode:
#     {% set center_x = printer.toolhead.axis_maximum.x / 2 | float %}         ; Create center point of x for fallback
#     {% set center_y = printer.toolhead.axis_maximum.y / 2 | float %}         ; Create center point of y for fallback
#   # turn off lights
#   WLED_OFF
#   LIGHT_SWITCH
#   {action_call_remote_method( "set_device_power", device="MicronPSU", state="off")}


