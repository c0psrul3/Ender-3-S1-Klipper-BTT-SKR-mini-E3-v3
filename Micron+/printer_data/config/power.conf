# #
# # [Power control](https://moonraker.readthedocs.io/en/latest/configuration/#power)
# #
# ## via GPIO
# [power printer]
# type: gpio
# pin: !gpiochip0/gpio22
# off_when_shutdown: True
# restart_klipper_when_powered: true
# initial_state: off

#
# [Power - Shelly](https://moonraker.readthedocs.io/en/latest/configuration/#shelly-configuration
#

# #
# # Shelly Plug (MAC: c0:49:ef:8b:e6:f4)
# #
# [power MicronPlug]
# type: shelly
# address: 10.57.90.73
# #user:
# #password:
# #output_id:
# off_when_shutdown: False
# on_when_job_queued: True
# locked_while_printing: True
# restart_klipper_when_powered: True
# restart_delay: 3.
# bound_services:

#
# Shelly 1PM (MAC: 98:f4:ab:b9:0b:02)
#
# MQTT broker
#   user: klipper
#   pass: zees4ceiLahch9ee
#
[power MicronPSU]
type: shelly
#address: 172.16.125.75
address: micron-1pm.lan
#user:
#password:
#output_id:
off_when_shutdown: False
on_when_job_queued: True
locked_while_printing: True
restart_klipper_when_powered: True
restart_delay: 3.
bound_services:
##   A newline separated list of services that are "bound" to the state of this
##   device.  When the device is powered on all bound services will be started.
##   When the device is powered off all bound services are stopped.
##
##   The items in this list are limited to those specified in the allow list,
##   see the [machine] configuration documentation for details.  Additionally,
##   the Moonraker service can not be bound to a power device.  Note that
##   service names are case sensitive.
##
##   The default is no services are bound to the device.#


#[power lights]
#type: klipper_device
#object_name: gcode_macro LIGHT_SWITCH
#locked_while_printing: True


# #
# # [Sensor](https://moonraker.readthedocs.io/en/latest/configuration/#sensor)
# #
# # Example configuration for a Shelly Pro 1PM (Gen2) switch with
# # integrated power meter running the Shelly firmware over MQTT.
# [sensor mqtt_powermeter]
# type: mqtt
# name: Powermeter
# # Use a different display name
# state_topic: shellypro1pm-8cb113caba09/status/switch:0
# # The response is a JSON object with a multiple fields that we convert to
# # float values before passing them to Moonraker.
# state_response_template:
#   {% set notification = payload|fromjson %}
#   {set_result("power", notification["apower"]|float)}
#   {set_result("voltage", notification["voltage"]|float)}
#   {set_result("current", notification["current"]|float)}
#   {set_result("energy", notification["aenergy"]["by_minute"][0]|float * 0.000001)}


## Query Printer Objects example
#[button check_status]
#pin: gpio26
#on_press:
#  {% set query_objs = {"toolhead": ["position"], "print_stats": None} %}
#  # JSON-RPC method is "printer.objects.query", which takes a single "objects"
#  # argument
#  {% set status = call_method("printer.objects.query", objects=query_objs) %}
#  # do something with the value returned from the object query, perhaps
#  # send a websocket notification or publish a mqtt topic
#
## Publish button event to MQTT Topic
#[button check_status]
#pin: gpio26
#on_release:
#  # JSON-RPC method is "server.mqtt.publish"
#  {% do call_method("server.mqtt.publish",
#                    topic="moonraker/mybutton",
#                    payload="Button Released") %}


# vim: set ft=cfg ts=2 sts=0 sw=2 et nofen :
