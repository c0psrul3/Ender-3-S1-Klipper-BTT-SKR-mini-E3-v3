# Included Macros
[include part-cooling.cfg]
#[include heatsoak.cfg]
[include testMovementNoise.cfg]

## TODO: replace neopixels.cfg with led_effects.cfg
#[include neopixels.cfg]
#[include led_effects.cfg]

## TODO: enable nozzle wiper
  # REMOVE: [include nozzlewiper.cfg]
#[include macros-nozzle-clean.cfg

## TODO: remove
#[include macros-lazy-home.cfg]

#####################################################################
#   Macros
#####################################################################

[gcode_macro HOME_IF_NEEDED]
gcode:
    {% if not 'xyz' in printer.toolhead.homed_axes %}
        G28
    {% endif %}


[gcode_macro SLEEP]
description: Wait/Sleep/Delay for specified amount of time (ms)
  Usage:  SLEEP [DURATION=1000]
variable_parameter_SECONDS:  0
variable_parameter_DURATION: 1000
gcode:
    {% if params.SECONDS > 0 %}
        {% set duration = (params.SECONDS * 1000 |float) %}
    {% else %}
        {% set duration = (params.DURATION|int) %}
    {% endif %}
    G4 P{duration|int} # wait for two seconds


[gcode_macro PARK_REAR]
variable_parameter_LIFT_Z: 0.0
gcode:
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
    {% set park_x = printer.save_variables.variables.park_rear.x|default(axis_maximum.x)|float %}
    {% set park_y = printer.save_variables.variables.park_rear.y|default(axis_maximum.y)|float %}
    {% set park_z = printer.save_variables.variables.park_rear.z|default(axis_maximum.z)|float %}
    {% set speed  = params.F|default(printer.gcode_move.speed)|int %}
    {% set lift_z = params.LIFT_Z|default(10)|float %}
    SAVE_GCODE_STATE NAME=PARK_REAR
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    {% if lift_z  > 0.0 %}
        SAFE_LIFT_Z Z={params.LIFT_Z} F={speed}
        G1 X{park_x} Y{park_y} F{speed}
    {% else %}
        G1 X{park_x} Y{park_y} Z{park_z} F{speed}
    {% endif %}
    RESTORE_GCODE_STATE NAME=PARK_REAR

[gcode_macro PARK_CENTER]
gcode:
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
    {% set park_x = (axis_maximum.x / 2)|float %}
    {% set park_y = (axis_maximum.y / 2)|float %}
    {% set speed  = params.F|default(printer.gcode_move.speed)|int %}
    SAVE_GCODE_STATE NAME=PARK_CENTER
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    G1 X{park_x} Y{park_y} F{speed}
    RESTORE_GCODE_STATE NAME=PARK_CENTER

[gcode_macro PARK_FRONT]
variable_xy_offset: 10
gcode:
    {% set axis_minimum  = printer.toolhead.axis_minimum %}
    {% set park_x = (axis_minimum.x + (params.XY_OFFSET|default(10)|float))|float %}
    {% set park_y = (axis_minimum.y + (params.XY_OFFSET|default(10)|float))|float %}
    {% set speed  = params.F|default(printer.gcode_move.speed)|int %}
    SAVE_GCODE_STATE NAME=PARK_FRONT
    HOME_IF_NEEDED
    ; park the head at the front of the printer
    G90
    G1 X{park_x} Y{park_y} F{speed}
    RESTORE_GCODE_STATE NAME=PARK_FRONT

[gcode_macro SAFE_LIFT_Z]
gcode:
    SAVE_GCODE_STATE NAME=SAFE_LIFT_Z
    HOME_IF_NEEDED
    # user parameters
    {% set z_height      = params.Z|default(0.0)|float %}
    {% set speed         = params.F|default(printer.gcode_move.speed)|int %}
    {% set axis_maximum  = printer.toolhead.axis_maximum %}
	{% set position      = printer.toolhead.position     %}
    ; compute the minimum safe upward move size
    {% set z_height = [z_height, axis_maximum.z - position.z]|min|float%}
    G91
    G1 Z{z_height} F{speed}
    RESTORE_GCODE_STATE NAME=SAFE_LIFT_Z

[gcode_macro PARK_FOR_SERVICE]
gcode:
    SAFE_LIFT_Z Z=100
    PARK_FRONT XY_OFFSET=0
    STATUS_CLEANING

[gcode_macro G32]
gcode:
    STATUS_HOMING

    ; stealth chop tuning process
    # motors off
    ;M84
    ;G4 P200

    # enable motors (this seems to energize the steppers in Klipper and no micro-moves are needed)
    ; SET_STEPPER_ENABLE STEPPER=stepper_x  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_y  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z  ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z1 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z2 ENABLE=1
    ; SET_STEPPER_ENABLE STEPPER=stepper_z3 ENABLE=1
    # wait at least 130ms for StealthChop to sense standstill current
    ;G4 P200

    # now proceed to home as normal
    HOME_IF_NEEDED

    STATUS_LEVELING
    QUAD_GANTRY_LEVEL

    {% if printer.beacon %}
        G28 Z METHOD=CONTACT CALIBRATE=0
    {% else %}
        G28
    {% endif %}
    #RESET_LOGO_LEDS
    #RESET_NOZZLE_LEDS
    STATUS_READY

# [gcode_macro PRINT_WARMUP]
# description: Perform initial homing and heating tasks
# variable_parameter_EXTRUDER_TEMP : 0
# variable_parameter_BED_TEMP : 0
# gcode:
#     {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default(190)|float %}
#     {% set BED_TEMP = params.BED_TEMP|default(60)|float %}
# 
#     CLEAR_PAUSE
#     SHOW_BUILD_SHEET
# 
#     M104 S{EXTRUDER_TEMP * 0.75}        ; set extruder temperature to 75%
#     M140 S{BED_TEMP}                    ; set bed temprature
#     M106 S64                            ; Enable the part cooling fan to keep the probe and cooling ducts cool during heat-up
#     G32                                 ; home all axes
#     HOME_IF_NEEDED
#     STATUS_HEATING
#     PARK_CENTER                         ; place tool head in the middle of the print volume for even frame heating
# 
#     # wait for top bed sensor to be in thermal equilibrium:
#     HEAT_SOAK HEATER='heater_bed' TARGET={BED_TEMP} SOAKER='temperature_sensor top_bed' CANCEL='CANCEL_PRINT'
# 
# [gcode_macro _PRINT_WARMUP]
# variable_bed_temp: 0
# variable_extruder_temp: 0
# gcode:
#     {% set warmup = printer['gcode_macro _PRINT_WARMUP'] %}
#     PRINT_WARMUP EXTRUDER_TEMP={warmup.extruder_temp} BED_TEMP={warmup.bed_temp}

[gcode_macro PRINT_START]
description: perform calibration and get ready to print
    Usage: PRINT_START [EXTRUDER_TEMP=0] [BED_TEMP=0] [CLEAN_NOZZLE='True'] [FILAMENT=''] [BUILD_SHEET=''] [MESH_PROFILE='']
    EXTRUDER_TEMP set by default from filament
    BED_TEMP set by default from filament
    FILAMENT default set by variables
    BUILD_SHEET default set by variables
    MESH_PROFILE load specific mesh or scan (default)
variable_parameter_MESH_PROFILE: ''
variable_parameter_FILAMENT: ''
variable_parameter_BUILD_SHEET: ''
variable_parameter_CLEAN_NOZZLE: 'True'
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
variable_raise_distance: 25
variable_do_qgl: 1
gcode:
    {% set MESH_PROFILE = params.MESH_PROFILE|default('adaptive')|string %}

    {% set svv = printer.save_variables.variables %}
    {% set sheet_key = (svv["build_sheet installed"] | string) %}
    {% set sheet = (svv[sheet_key] | default(None)) %}
    {% set BUILD_SHEET = params.BUILD_SHEET|default(sheet.name)|string %}
    {% set current_model = printer.beacon.model|lower|string %}
    {% set default_mesh = (current_model | lower | replace("_", "-")) %}

    {% if BUILD_SHEET != (printer.beacon.model|lower|string) %}
        BEACON_MODEL_SELECT NAME={BUILD_SHEET}
    {% endif %}

    {% set CLEAN_NOZZLE = params.CLEAN_NOZZLE|default('True')|lower|string %}

    {% set extruder = printer.toolhead.extruder %}
    {% set EXTRUDER_TEMP = params.EXTRUDER_TEMP|default((printer[extruder]).filament.extruder)|float %}
    {% set BED_TEMP = params.BED_TEMP|default((printer[extruder]).filament.bed)|float %}

    CLEAR_PAUSE
    BED_MESH_CLEAR
    STATUS_BUSY
    HOME_IF_NEEDED
    QUAD_GANTRY_LEVEL

    # only calibrate if param BUILD_SHEET was defined
    {% if BUILD_SHEET == '' %}
        # Calibrate z_offset at home_xy_position
        # [Beacon Docs: Contact Auto-Calibration](https://docs.beacon3d.com/contact/#42-contact-auto-calibration-with-induction-homing)
        RESPOND TYPE=echo MSG='{"Preheat Nozzle to 75%%, %.0fÂ°C" % (EXTRUDER_TEMP|float * 0.75) }'
        PREHEAT_EXTRUDER
        G28 Z METHOD=CONTACT CALIBRATE=1       ; Calibrate with reduced nozzle temp
    {% endif %}

    ## Bed Mesh: Scan Method only valid with Eddy or Beacon, etc.
    STATUS_MESHING
    {% if MESH_PROFILE == 'adaptive' %}
        BED_MESH_CALIBRATE RUNS=1 PROBE_METHOD=proximity ADAPTIVE=1
    {% elif MESH_PROFILE != '' %}
        RESPOND TYPE=echo MSG='{"Loading Existing Mesh Profile: %s" % (MESH_PROFILE | pprint | string)}'
        BED_MESH_PROFILE LOAD={MESH_PROFILE}
    {% elif MESH_PROFILE == '' %}
        #RESPOND TYPE=echo MSG='{"Loading Existing Mesh Profile: %s" % (default_mesh | pprint | string)}'
        BED_MESH_PROFILE LOAD={default_mesh}
    {% endif %}

    {% if CLEAN_NOZZLE == "true" %}
        CLEAN_NOZZLE                            ; Clean extruder nozzle
    {% else %}
        SAFE_LIFT_Z Z={raise_distance} F=3000   ; Move to the front of the printer to
        PARK_FRONT                              ;   allow user to remove any oozing
    {% endif %}
    G28 Z METHOD=CONTACT CALIBRATE=0            ; Beacon - calibrate z offset only after mesh

    STATUS_HEATING
    HEAT_AND_WAIT
    STATUS_PRINTING
    LINE_PURGE
    ; if a callback was supplied to print_start, call it
    {% set print_start_macro = printer['gcode_macro PRINT_START'] %}
    {% if print_start_macro.callback  %}
        {print_start_macro.callback}
    {% endif %}

[gcode_macro _PRINT_START]
variable_mesh_profile: 'default'
variable_filament: ''
variable_clean_nozzle: 0
variable_extruder_temp: 0
variable_bed_temp: 0
gcode:
    {% set start = printer['gcode_macro _PRINT_START'] %}
    PRINT_START MESH_PROFILE={start.mesh_profile} BUILD_SHEET={start.build_sheet} FILAMENT={start.filament} CLEAN_NOZZLE={start.clean_nozzle} EXTRUDER_TEMP={start.extruder_temp} BED_TEMP={start.bed_temp}

[gcode_macro _SETUP_PRINT_START]
variable_parameter_MESH_PROFILE: 'default'
variable_parameter_BUILD_SHEET: ''
variable_parameter_FILAMENT: ''
variable_parameter_CLEAN_NOZZLE: 'True'
variable_parameter_EXTRUDER_TEMP : 0
variable_parameter_BED_TEMP : 0
gcode:
    # # configure _PRINT_WARMUP variables
    # SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    # SET_GCODE_VARIABLE MACRO=_PRINT_WARMUP VARIABLE=bed_temp VALUE={params.BED_TEMP}

    # configure print start
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=mesh_profile VALUE={params.MESH_PROFILE}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=build_sheet VALUE={params.BUILD_SHEET}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=filament VALUE={params.FILAMENT}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=clean_nozzle VALUE={params.CLEAN_NOZZLE}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=extruder_temp VALUE={params.EXTRUDER_TEMP}
    SET_GCODE_VARIABLE MACRO=_PRINT_START VARIABLE=bed_temp VALUE={params.BED_TEMP}

[gcode_macro TURN_OFF_FAN]
description: turn off extruder fans once under min_extrude_temp threshold
    Usage: TURN_OFF_FAN [TARGET_TEMP=100.0]
variable_parameter_TARGET_TEMP: 0.0
gcode:
    {% set extruder = printer.toolhead.extruder %}
    {% if (params.TARGET_TEMP|default(0.0)|float) > 0.0 %}
        {% set target_temp = params.TARGET_TEMP|float %}
        TEMPERATURE_WAIT SENSOR={extruder} MAXIMUM={target_temp}
    #{% else %}
    #    {% set th_safe_temp = printer.configfile.settings[extruder].min_extrude_temp|default('100.0')|float %}
    #    TEMPERATURE_WAIT SENSOR={extruder} MAXIMUM={th_safe_temp}
    {% endif %}
    M107            ; nozzle fan off

[gcode_macro TURN_ON_PART_FAN]
description: turn on part cooling fans
    Usage: TURN_ON_PART_FAN
gcode:
    M106 S128         ; part cooling on (50% == 128, max == 255)

[gcode_macro TURN_OFF_PART_FAN]
description: turn off part cooling fans
    Usage: TURN_OFF_PART_FAN
gcode:
    M106 S0         ; part cooling off (0%)


[gcode_macro PRINT_END]
description: tasks to reset the printer state and cool everything down.
#   Use PRINT_END for the slicer ending script - please customise for your slicer of choice
variable_retract_distance: 3.0
variable_lift_z: 35
gcode:
    ## safe anti-stringing move coords
    #{% set th = printer.toolhead %}
    #{% set x_safe = th.position.x + 20 * (1 if th.axis_maximum.x - th.position.x > 20 else -1) %}
    #{% set y_safe = th.position.y + 20 * (1 if th.axis_maximum.y - th.position.y > 20 else -1) %}
    #{% set z_safe = [th.position.z + lift_z, th.axis_maximum.z] | min %}
    #{% set lift_nozzle = [z_safe - th.position.z, 10] | max %}

    SAVE_GCODE_STATE NAME=STATE_PRINT_END
    {% set speed = params.SPEED | default(5 * 600) %}

    M400                           ; wait for buffer to clear
    G92 E0                         ; zero the extruder
    G1 E-{retract_distance} F1800  ; retract filament
    TURN_OFF_HEATERS

    ## Move Nozzle Away From Print Object
    #SAFE_LIFT_Z Z={lift_z} F={speed}
    PARK_REAR LIFT_Z={lift_z}
    TURN_OFF_FAN

    ## Final End
    Z_OFFSET_APPLY_PROBE
    BED_MESH_CLEAR
    SET_GCODE_OFFSET Z=0
    RESTORE_GCODE_STATE NAME=STATE_PRINT_END
    STATUS_PART_READY


[gcode_macro CANCEL_PRINT]
rename_existing: BASE_CANCEL_PRINT
variable_lift_z: 35
gcode:
    STATUS_CANCELLED
    STOP_HEAT_SOAK
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    SDCARD_RESET_FILE
    PARK_REAR LIFT_Z={lift_z}
    BED_MESH_CLEAR
    BASE_CANCEL_PRINT
    ## reset nozzle offset
    SET_GCODE_OFFSET Z=0

; catch M600 from Prusa Slicer to allow a manual color change
[gcode_macro M600]
variable_retract_distance: 3.0
gcode:
    PAUSE
    # TODO: add retract here
    G1 E-{retract_distance} F1800                 ; retract filament
    SAFE_LIFT_Z Z=50 F=3000.0
    PARK_FRONT

[gcode_macro PRINT_MANUAL_COLOR_CHANGE]
variable_retract_distance: 3.0
gcode:
    PAUSE
    # TODO: add retract here
    G1 E-{retract_distance} F1800                 ; retract filament
    SAFE_LIFT_Z Z=50 F=3000.0
    PARK_FRONT

[gcode_macro PID_CALIBRATE_EXTRUDER]
gcode:
    PID_CALIBRATE HEATER=extruder TARGET=250 WRITE_FILE=1

[gcode_macro PID_CALIBRATE_HEATER_BED]
gcode:
    PID_CALIBRATE HEATER=heater_bed TARGET=100 WRITE_FILE=1

[gcode_macro TEST_PROBE_Z_CORNERS]
gcode:
    SAVE_GCODE_STATE NAME=TEST_PROBE_CORNERS
    G90
    G0 X93 Y25 F18000
    PROBE_ACCURACY
    G0 X93 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y225 F18000
    PROBE_ACCURACY
    G0 X293 Y25 F18000
    PROBE_ACCURACY
    RESTORE_GCODE_STATE NAME=TEST_PROBE_CORNERS

[gcode_macro DUMP_TEST]
gcode:
    {% set extruder = printer.toolhead.extruder %}
    {action_respond_info("extruder name: %s" % (extruder))}
    {action_respond_info("extruer object: %s" % (printer[extruder] | pprint | string))}
    {action_respond_info("bed temp: %f" % ((printer[extruder]).filament.bed))}
    {action_respond_info("extruder temp: %f" % ((printer[extruder]).filament.extruder))}
    {action_respond_info("nozzle diameter: %f" % (printer.configfile.settings[extruder].nozzle_diameter))}

[gcode_macro DUMP_PARAMETERS]
gcode:
    {% for name1 in printer %}
        { action_respond_info("printer['%s'] = %s" % (name1, printer[name1] | pprint)) }
    {% endfor %}

[gcode_macro DUMP_PAUSE_STATE]
gcode:
   {action_respond_info("[pause_resume].is_paused = %s" % (printer['pause_resume'].is_paused | string)) }
   {action_respond_info("[virtual_sdcard] = %s" % (printer['virtual_sdcard'] | pprint | string)) }
   
[gcode_macro DUMP_EXTRUDER]
gcode:
   {action_respond_info("printer['extruder'] = %s" % (printer['extruder'] | pprint)) }

[gcode_macro DUMP_EXTRUDER1]
gcode:
   {action_respond_info("printer['extruder1'] = %s" % (printer['extruder1'] | pprint)) }

[gcode_macro DUMP_TOOLHEAD]
gcode:
   {action_respond_info("printer['toolhead'] = %s" % (printer['toolhead'] | pprint)) }

[gcode_macro DUMP_SAVE_VARIABLES]
gcode:
    {% for name2 in printer["save_variables"] %}
        { action_respond_info("printer['%s'].%s = %s" % ("save_variables", name2, printer["save_variables"][name2])) }
    {% else %}
        { action_respond_info("printer['%s'] = %s" % ("save_variables", printer["save_variables"])) }
    {% endfor %}

# this needs access to print start etc.
[include pa-cal.cfg]

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=LOAD_FILAMENT
    {% set speed = params.SPEED | default(5 * 60) %}
    {% set purge_distance = params.PURGE | default(75) %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E50 F{speed}
    RESTORE_GCODE_STATE NAME=LOAD_FILAMENT

[gcode_macro PURGE_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=PURGE_FILAMENT
    {% set speed = params.SPEED | default(5 * 60) %}
    {% set purge_distance = params.PURGE | default(15) %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E{purge_distance} F{speed}
    RESTORE_GCODE_STATE NAME=PURGE_FILAMENT

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=UNLOAD_FILAMENT
    {% set pull_speed = params.PULL_SPEED | default(5 * 60) %}
    {% set pull_distance = ((params.PULL_DISTANCE | default(15)) | float ) * -1 %}
    {% set max_velocity = printer.configfile.settings['extruder'].max_extrude_only_velocity %}
    {% set retract_speed = params.RETRACT_SPEED | default(max_velocity) %}
    {% set retract_distance = ((params.RETRACT_DISTANCE | default(30)) | float) * -1 %}
    HEAT_EXTRUDER_AND_WAIT
    G91
    G1 E{pull_distance} F{pull_speed}
    G1 E{retract_distance} F{retract_speed}
    RESTORE_GCODE_STATE NAME=UNLOAD_FILAMENT

[gcode_macro T0]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder

[gcode_macro T1]
gcode:
    ACTIVATE_EXTRUDER EXTRUDER=extruder1

[gcode_macro WARM_UP_NOZZLE]
gcode:
    PREHEAT_EXTRUDER

[gcode_macro WARM_UP_BED]
gcode:
    PREHEAT_BED

[gcode_macro FREEZE]
gcode:
    TURN_OFF_HEATERS

[gcode_macro NOZZLE_15]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.15

[gcode_macro NOZZLE_25]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.25

[gcode_macro NOZZLE_40]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.4

[gcode_macro NOZZLE_60]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.6

[gcode_macro NOZZLE_80]
gcode:
    CHANGE_NOZZLE NOZZLE_DIAMETER=0.8

[gcode_macro SET_EXTRUDER_PA]
gcode:
    #{% set flow = (params.FLOW | float) | default(100.0) %}
    {% set extruder = 'extruder' + (params.EXTRUDER | default('')) %}
    {% if extruder == 'extruder0' %}
        {% set extruder = 'extruder' %}
    {% endif %}
    {% set extruder_nozzle_diameter = (printer[extruder]).nozzle_diameter %}
    {% set nozzle = (params.NOZZLE | default(extruder_nozzle_diameter) | float) %}
    # option 1, get the defaukt PA value from the current filament
    {% set advance = params.ADVANCE | default((printer[extruder]).filament.pressure_advance) | float %}
    # option 2, fall back to the default PA value from the config file
    {% if not advance %}
        {% set advance = printer.configfile.config[extruder].pressure_advance %}
    {% endif %}

    {% if nozzle == extruder_nozzle_diameter %}
        SET_PRESSURE_ADVANCE EXTRUDER={extruder} ADVANCE={advance}
        {action_respond_info("Pressure Advance Set: Extruder: %s Nozzle: %f Pressure Advance: %f" % (extruder, nozzle, advance))}
        # TODO: How do we handle per-extruder flow rate?
        # Its not stored per-extruder, its stored in gcode_move
        # * we need a per-extruder setting
        # * we need that setting applied every time there is a tool change.
        #M221 S{flow}
    {% endif %}
